{"version":3,"sources":["Networking/api.js","Context/SessionContext.js","Components/Chat.js","Components/Login.js","Components/App.js","index.js"],"names":["BASE_URL","CHAT_MESSAGE","USER_JOINED","USER_LEFT","source","login","name","a","axios","post","response","status","message","data","username","console","log","getUsers","get","res","getHistory","throwaway","user","onMessage","onJoin","onLeave","onError","close","EventSource","onopen","addEventListener","JSON","parse","time","onerror","error","SessionContext","createContext","SessionContextProvider","props","useState","setUsername","messages","setMessages","users","setUsers","requestUsers","requestHistory","Provider","value","addMessage","push","clearMessages","children","Chat","nav","useNavigate","context","useContext","messageInput","useRef","useEffect","getStream","className","Card","body","style","textAlign","marginBottom","fontWeight","map","key","Body","Date","toLocaleTimeString","display","flexDirection","Form","Control","as","placeholder","height","ref","Button","onClick","sendMessage","current","i","fireSuccess","Swal","fire","icon","title","text","showConfirmButton","timer","fireError","Login","loginInput","location","useLocation","undefined","loginClick","e","loginName","InputGroup","size","id","Text","FormControl","App","path","element","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.da8ea90c.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nconst BASE_URL = 'https://eventsourcechat.herokuapp.com/';\r\nconst CHAT_MESSAGE = 'CHAT_MESSAGE';\r\nconst USER_JOINED = 'USER_JOINED';\r\nconst USER_LEFT = 'USER_LEFT';\r\nlet source = [];\r\n\r\nexport async function login(name) {\r\n  try {\r\n    const response = await axios.post(`${BASE_URL}/login/`, {\r\n      name,\r\n    });\r\n    return {\r\n      status: true,\r\n      message: response.data.message,\r\n      name: response.data.name,\r\n    };\r\n  } catch (error) {\r\n    return {\r\n      status: false,\r\n      message: error.response.data.message || 'something went wrong :(',\r\n    };\r\n  }\r\n}\r\n\r\nexport async function sendMessage(username, message) {\r\n  try {\r\n    const response = await axios.post(\r\n      `${BASE_URL}/message/send?user=${username}`,\r\n      {\r\n        message,\r\n      }\r\n    );\r\n  } catch (error) {\r\n    console.log(error.response);\r\n  }\r\n}\r\n\r\nexport async function getUsers() {\r\n  try {\r\n    const res = await axios.get(`${BASE_URL}/message/userList?user=admin`);\r\n    return res.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n}\r\n\r\nexport async function getHistory() {\r\n  try {\r\n    const res = await axios.get(`${BASE_URL}/message/history?user=admin`);\r\n    return res.data;\r\n  } catch (error) {\r\n    console.log(error);\r\n    return [];\r\n  }\r\n}\r\n\r\nconst throwaway = () => {};\r\nexport async function getStream(\r\n  user,\r\n  onMessage = throwaway,\r\n  onJoin = throwaway,\r\n  onLeave = throwaway,\r\n  onError = throwaway\r\n) {\r\n  if (source[0]) {\r\n    source[0].close();\r\n  } //If stream is up close it\r\n  source[0] = new EventSource(`${BASE_URL}/message/stream?user=${user}`);\r\n\r\n  source[0].onopen = () => {\r\n    console.log('EventStream opened');\r\n  };\r\n\r\n  source[0].addEventListener(USER_JOINED, (message) => {\r\n    message = JSON.parse(message.data);\r\n    onJoin(message.username, message.time);\r\n  });\r\n\r\n  source[0].addEventListener(USER_LEFT, (message) => {\r\n    message = JSON.parse(message.data);\r\n    console.log(`User ${message.username} left!`);\r\n    onLeave(message.username, message.time);\r\n  });\r\n\r\n  source[0].addEventListener(CHAT_MESSAGE, (message) => {\r\n    message = JSON.parse(message.data);\r\n    onMessage(message.username, message.message, message.time);\r\n  });\r\n\r\n  source[0].onerror = (error) => {\r\n    console.log('Error\\n', error);\r\n    source[0].close();\r\n    onError();\r\n  };\r\n\r\n  return () => {\r\n    source[0].close();\r\n  };\r\n}\r\n\r\nexport function closeStream() {\r\n  console.log(source[0]);\r\n  if (source[0]) {\r\n    source[0].close();\r\n    source[0] = undefined;\r\n    console.log('Closed');\r\n  }\r\n}\r\n","import { createContext, useEffect, useState } from 'react';\r\nimport { getHistory, getUsers } from '../Networking/api';\r\n\r\nexport const SessionContext = createContext('');\r\n\r\nfunction SessionContextProvider(props) {\r\n  const [username, setUsername] = useState();\r\n  const [messages, setMessages] = useState([]);\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const addMessage = (message) => {\r\n    messages.push(message);\r\n    setMessages([...messages]);\r\n  };\r\n\r\n  const clearMessages = () => {\r\n    setMessages([]);\r\n  };\r\n\r\n  const requestUsers = async () => {\r\n    setUsers([...(await getUsers())]);\r\n  };\r\n\r\n  const requestHistory = async () => {\r\n    setMessages(await getHistory());\r\n    console.log('Got history');\r\n  };\r\n\r\n  return (\r\n    <SessionContext.Provider\r\n      value={{\r\n        username,\r\n        setUsername,\r\n        messages,\r\n        setMessages,\r\n        addMessage,\r\n        users,\r\n        requestUsers,\r\n        clearMessages,\r\n        requestHistory,\r\n      }}\r\n    >\r\n      {props.children}\r\n    </SessionContext.Provider>\r\n  );\r\n}\r\nexport default SessionContextProvider;\r\n","import { useContext, useRef, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport { SessionContext } from '../Context/SessionContext';\r\nimport { getStream, sendMessage } from '../Networking/api';\r\nimport { Form, Button, Card } from 'react-bootstrap';\r\nimport '../styles/chat.css';\r\n\r\nfunction Chat(props) {\r\n  const nav = useNavigate();\r\n  const context = useContext(SessionContext);\r\n  const messageInput = useRef(null);\r\n\r\n  const onMessage = (username, message, time) => {\r\n    context.addMessage({ username, message, time });\r\n  };\r\n\r\n  const onLeave = (username, time) => {\r\n    context.addMessage({\r\n      username: 'Server',\r\n      message: `${username} left`,\r\n      time,\r\n    });\r\n    context.requestUsers();\r\n  };\r\n\r\n  const onJoin = (username, time) => {\r\n    context.addMessage({\r\n      username: 'Server',\r\n      message: `${username} joined`,\r\n      time,\r\n    });\r\n    context.requestUsers();\r\n  };\r\n\r\n  const onError = () => {\r\n    nav('/');\r\n  };\r\n\r\n  useEffect(() => {\r\n    getStream(context.username, onMessage, onJoin, onLeave, onError);\r\n  }, []);\r\n\r\n  const send = () => {\r\n    sendMessage(context.username, messageInput.current.value);\r\n    messageInput.current.value = '';\r\n  };\r\n  return (\r\n    <div className={'chat'}>\r\n      <Card body style={{ textAlign: 'left', marginBottom: '0.5em' }}>\r\n        Logged in as{' '}\r\n        <span style={{ fontWeight: 'bold' }}>{context.username}</span>\r\n      </Card>\r\n      <div className={'content'}>\r\n        <div className={'message-area'}>\r\n          <div className={'history-wrapper'}>\r\n            <div className={'history'}>\r\n              {context.messages.map((message, key) => {\r\n                return (\r\n                  <Card className={'msg'} key={key}>\r\n                    <Card.Body>\r\n                      <span className=\"msg-sender\">{message.username}:</span>\r\n                      <span className={'msg-body'}> {message.message}</span>\r\n                      <span className={'time'}>\r\n                        {new Date(message.time).toLocaleTimeString()}{' '}\r\n                      </span>\r\n                    </Card.Body>\r\n                  </Card>\r\n                );\r\n              })}\r\n            </div>\r\n          </div>\r\n          <div style={{ display: 'flex', flexDirection: 'row' }}>\r\n            <Form.Control\r\n              as=\"textarea\"\r\n              placeholder=\"Write your message here\"\r\n              style={{ height: '100px' }}\r\n              className={'messagebox'}\r\n              ref={messageInput}\r\n            />\r\n            <Button className={'send'} onClick={send}>\r\n              Send!\r\n            </Button>\r\n          </div>\r\n        </div>\r\n        <ul className={'online list-group'}>\r\n          <span className={'online-label'}>Online</span>\r\n          {context.users.map((user, i) => {\r\n            return (\r\n              <li className={'list-group-item'} key={i}>\r\n                {user.name}\r\n              </li>\r\n            );\r\n          })}\r\n        </ul>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Chat;\r\n","import { useRef, useContext, useEffect } from 'react';\r\nimport { useNavigate, useLocation } from 'react-router-dom';\r\nimport { closeStream, login } from '../Networking/api';\r\nimport Swal from 'sweetalert2';\r\nimport '../styles/login.css';\r\nimport { SessionContext } from '../Context/SessionContext';\r\nimport { Button, InputGroup, FormControl } from 'react-bootstrap';\r\n\r\nfunction Login(props) {\r\n  const loginInput = useRef(null);\r\n  const context = useContext(SessionContext);\r\n  const nav = useNavigate();\r\n  const location = useLocation();\r\n\r\n  useEffect(() => {\r\n    closeStream();\r\n  }, [location]);\r\n\r\n  const loginClick = async (e) => {\r\n    const loginName = loginInput.current.value;\r\n    const { status, message, name } = await login(loginName);\r\n    status ? fireSuccess(message) : fireError(message);\r\n    if (status) {\r\n      context.setUsername(name);\r\n      await context.requestHistory();\r\n      nav('/chat');\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className={'login'}>\r\n      <span className={'title card-title'}>Chat Room!</span>\r\n      <InputGroup\r\n        size=\"lg\"\r\n        id=\"inputGroup-sizing-sm\"\r\n        className={'mb-3 name-input login-elm'}\r\n        placeholder={'Enter Login Name'}\r\n      >\r\n        <InputGroup.Text>Login Name:</InputGroup.Text>\r\n        <FormControl\r\n          aria-label=\"Small\"\r\n          aria-describedby=\"inputGroup-sizing-sm\"\r\n          ref={loginInput}\r\n        />\r\n      </InputGroup>\r\n      <div className={'btn-container login-elm'}>\r\n        <Button id={'login-btn'} size=\"lg\" onClick={loginClick}>\r\n          Login\r\n        </Button>\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\nfunction fireSuccess(message) {\r\n  Swal.fire({\r\n    icon: 'success',\r\n    title: 'Hooray!',\r\n    text: message,\r\n    showConfirmButton: false,\r\n    timer: 1500,\r\n  });\r\n}\r\n\r\nfunction fireError(message) {\r\n  Swal.fire({\r\n    icon: 'error',\r\n    title: 'Oops!',\r\n    text: message,\r\n    showConfirmButton: false,\r\n    timer: 1500,\r\n  });\r\n}\r\nexport default Login;\r\n","import { BrowserRouter, Routes, Route } from 'react-router-dom';\r\nimport SessionContextProvider from '../Context/SessionContext';\r\nimport Chat from './Chat';\r\nimport Login from './Login';\r\n\r\nfunction App() {\r\n  return (\r\n    <SessionContextProvider>\r\n      <BrowserRouter>\r\n        <Routes>\r\n          <Route path={'/'} element={<Login />} />\r\n          <Route path={'/chat'} element={<Chat />} />\r\n        </Routes>\r\n      </BrowserRouter>\r\n    </SessionContextProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './styles/index.css';\r\nimport App from './Components/App';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n"],"sourceRoot":""}